{

package main

import (
	"github.com/sinusoids/gem/framecc/ast"
)

var currentFile *ast.File

func toIfaceSlice(v interface{}) []interface{} {
	if v == nil {
		return nil
	}
	return v.([]interface{})
}

func parseFrameDefinition(inputFile string) (*ast.File, error) {
	file, err := os.Open(os.Args[1])
	if err != nil {
		log.Fatal(err)
	}

	currentFile = &ast.File{
		Types: make(map[string]ast.Type),
		Frames: make(map[string]ast.Frame),
	}

	_, err = ParseReader("", file)
    if err != nil {
        return nil, err
    }

    return currentFile, nil
}

}

Start <- _ decls:Decl+ _ EOF {
	return currentFile, nil
}

Decl <- _ Frame _
     /  _ Struct _

Struct <- "struct" __ identifier:Ident _ fields:StructBlock _ {
	decl := ast.Struct{
		Name: identifier.(string),
		Fields: fields.([]ast.Field),
	}

	currentFile.Types[decl.Name] = decl
	return decl, nil
}

StructBlock <- '{' _ fields:Field+ _ '}' {
	fieldsSl := make([]ast.Field, 0)
	fieldsIfSl := toIfaceSlice(fields)
	for _, fieldIfSl := range fieldsIfSl {
		fieldsSl = append(fieldsSl, fieldIfSl.(ast.Field))
	}

	return fieldsSl, nil
}

Field <- _ identifier:Ident __ typ:Type EOL {
	return ast.Field{
		Name: identifier.(string),
		Type: typ.(ast.Type),
	}, nil
}

Type <- StringType / IntegerTypeNoFlags / IntegerTypeAndFlags / TypeRef

StringType <- "string" '[' size:Number ']' {
	return ast.StringType{
		Length: size.(int),
	}, nil
} / "string" '[' fieldref:Ident ']' {
	return ast.VariableStringType{
		FieldRef: fieldref.(string),
	}, nil
}

IntegerTypeNoFlags <- baseType:IntegerType !(_ '(') {
	return baseType, nil
}

IntegerTypeAndFlags <- baseType:IntegerType '(' flags:(IntegerFlag (',' _)?)+ ')' {
	iType := baseType.(ast.IntegerType)
	hasFlag := func(flags interface{}, flag string) bool {
		for _, f_ := range toIfaceSlice(flags) {
			f := toIfaceSlice(f_)
			if string(f[0].([]byte)) == flag {
				return true
			}
		}
		return false
	}

	modMap := map[string]ast.IntegerFlag {
		"negate": ast.IntNegate,
		"inv128": ast.IntInv128,
		"ofs128": ast.IntOfs128,
		"endian(little)": ast.IntLittleEndian,
		"endian(pdp)": ast.IntPDPEndian,
		"endian(rpdp)": ast.IntRPDPEndian,
	}

	for k, v := range modMap {
		if hasFlag(flags, k) {
			iType.Modifiers = iType.Modifiers | v
		}
	}

    return iType, nil
}

IntegerType <- unsigned:'u'? "int" bitsize:Number {
	signed := true
	if unsigned != nil {
		signed = false
	}
    return ast.IntegerType{
		Signed: signed,
		Bitsize: bitsize.(int),
	}, nil
}

IntegerFlag <- "negate" / "inv128" / "ofs128" / "endian(little)" / "endian(pdp)" / "endian(rpdp)" {
    return string(c.text), nil
}

TypeRef <- name:Ident {
	if typ, ok := currentFile.Types[name.(string)]; !ok {
		return "", fmt.Errorf("%v: %v", ast.ErrNoSuchType, name.(string))
	} else {
		return typ, nil
	}
}

Frame <- "frame" __ identifier:Ident '(' number:Number framesz:(',' _ FrameSize)? ')' _ object:TypeRef {
	if framesz == nil {
		framesz = ast.SzFixed
	} else {
		framesz = framesz.([]interface{})[2]
	}

	decl := ast.Frame{
		Name: identifier.(string),
		Number: number.(int),
		Size: framesz.(ast.FrameSize),
		Object: object.(ast.Type),
	}

	currentFile.Frames[decl.Name] = decl
	return decl, nil
}

Ident <- [a-zA-Z0-9_]+ {
    return string(c.text), nil
}

Number <- [0-9]+ {
    return strconv.Atoi(string(c.text))
}

Value <- [a-zA-Z0-9]+ {
    return string(c.text), nil
} / Ident

FrameSize <- "var8" {
    return ast.SzVar8, nil
} / "var16" {
    return ast.SzVar16, nil
}

SourceChar <- .
Comment <- MultiLineComment / SingleLineComment
MultiLineComment <- "/*" ( !"*/" SourceChar )* "*/"
SingleLineComment <- "//" ( !EOL SourceChar )*

_  <- ( Whitespace / EOL / Comment )*
__ <- ( Whitespace / EOL / Comment )+

Whitespace <- [ \t\r]
EOL <- '\n'
EOF <- !.

/*
Frames <- _ frames:(Frame)+ EOF {
    framesSl := make([]Frame, 0)
    for _, f := range toIfaceSlice(frames) {
        framesSl = append(framesSl, f.(Frame))
    }
    return framesSl, nil
}

Frame <- spec:FrameSpec _ content:Code _ {
    return Frame{
        FrameSpec: spec.(FrameSpec),
        Content: content.(string),
    }, nil
}

FrameSpec <- "frame" _ frameType:FrameType _ name:Ident {
    return FrameSpec{
        Name: name.(string),
        FrameType: frameType.(FrameType),
    }, nil
}

FrameType <- '[' _ id:FrameID _ ',' _ length:FrameLength _ ']' {
    return FrameType{
        Id: id.(int),
        FrameLength: length.(FrameLength),
    }, nil
}

FrameID <- "id" Whitespace val:Number {
    return val, nil
}

FrameLength <- "length" Whitespace val:LengthValue {
    return val, nil
}

Code <- '{' CodeBlock '}' {
    return string(c.text), nil
}

CodeBlock <- ( ( ![{}] SourceChar )+ / '{' CodeBlock '}' )*

*/
