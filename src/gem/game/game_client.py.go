// Generated by gopygen; DO NOT EDIT
package game

import (
	"fmt"
	"gem/encoding"
	"gem/game/player"
	"gem/log"

	"github.com/qur/gopy/lib"
	"github.com/tgascoigne/gopygen/gopygen"
)

// Sometimes we might generate code which doesn't use some of the above imports
// Use them here just in case
var _ = fmt.Sprintf("")
var _ = gopygen.Dummy

var GameClientDef = py.Class{
	Name:    "GameClient",
	Pointer: (*GameClient)(nil),
}

// Registers this type with a python module
func RegisterGameClient(module *py.Module) error {
	var err error
	var class *py.Type
	if class, err = GameClientDef.Create(); err != nil {
		return err
	}

	if err = module.AddObject("GameClient", class); err != nil {
		return err
	}

	return nil
}

// Alloc allocates an object for use in python land.
// Copies the member fields from this object to the newly allocated object
// Usage: obj := GoObject{X:1, Y: 2}.Alloc()
func (obj GameClient) Alloc() (*GameClient, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	// Allocate
	alloc_, err := GameClientDef.Alloc(0)
	if err != nil {
		return nil, err
	}
	alloc := alloc_.(*GameClient)
	// Copy fields

	alloc.service = obj.service

	alloc.decode = obj.decode

	alloc.Log = obj.Log

	alloc.Session = obj.Session

	alloc.Profile = obj.Profile

	return alloc, nil
}

func (obj *GameClient) PyGet_Log() (py.Object, error) {
	return gopygen.TypeConvOut(obj.Log, "*log.Module")
}

func (obj *GameClient) PySet_Log(arg py.Object) error {
	val, err := gopygen.TypeConvIn(arg, "*log.Module")
	if err != nil {
		return err
	}
	obj.Log = val.(*log.Module)
	return nil
}

func (obj *GameClient) PyGet_Session() (py.Object, error) {
	return gopygen.TypeConvOut(obj.Session, "*player.Session")
}

func (obj *GameClient) PySet_Session(arg py.Object) error {
	val, err := gopygen.TypeConvIn(arg, "*player.Session")
	if err != nil {
		return err
	}
	obj.Session = val.(*player.Session)
	return nil
}

func (obj *GameClient) PyGet_Profile() (py.Object, error) {
	return gopygen.TypeConvOut(obj.Profile, "*player.Profile")
}

func (obj *GameClient) PySet_Profile(arg py.Object) error {
	val, err := gopygen.TypeConvIn(arg, "*player.Profile")
	if err != nil {
		return err
	}
	obj.Profile = val.(*player.Profile)
	return nil
}

func (client *GameClient) Py_Conn(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 0 {
		return nil, fmt.Errorf("Py_Conn: parameter length mismatch")
	}

	res0 := client.Conn()

	out_0, err := gopygen.TypeConvOut(res0, "*Connection")
	if err != nil {
		return nil, err
	}

	return out_0, nil

}

func (client *GameClient) Py_Decode(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 0 {
		return nil, fmt.Errorf("Py_Decode: parameter length mismatch")
	}

	res0 := client.Decode()

	out_0, err := gopygen.TypeConvOut(res0, "error")
	if err != nil {
		return nil, err
	}

	return out_0, nil

}

func (client *GameClient) Py_Encode(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 1 {
		return nil, fmt.Errorf("Py_Encode: parameter length mismatch")
	}

	in_0, err := gopygen.TypeConvIn(args[0], "encoding.Encodable")
	if err != nil {
		return nil, err
	}

	res0 := client.Encode(in_0.(encoding.Encodable))

	out_0, err := gopygen.TypeConvOut(res0, "error")
	if err != nil {
		return nil, err
	}

	return out_0, nil

}
