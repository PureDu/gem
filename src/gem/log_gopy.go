// Generated by gopygen; DO NOT EDIT
package gem

import (
	"fmt"

	"github.com/qur/gopy/lib"
	"github.com/tgascoigne/gopygen/gopygen"
)

// Sometimes we might generate code which doesn't use some of the above imports
// Use them here just in case
var _ = fmt.Sprintf("")
var _ = gopygen.Dummy

var SysLogDef = py.Class{
	Name:    "SysLog",
	Pointer: (*SysLog)(nil),
}

// Registers this type with a python module
func RegisterSysLog(module *py.Module) error {
	var err error
	var class *py.Type
	if class, err = SysLogDef.Create(); err != nil {
		return err
	}

	if err = module.AddObject("SysLog", class); err != nil {
		return err
	}

	return nil
}

// Alloc allocates an object for use in python land.
// Copies the member fields from this object to the newly allocated object
// Usage: obj := GoObject{X:1, Y: 2}.Alloc()
func (obj SysLog) Alloc() (*SysLog, error) {
	// Allocate
	alloc_, err := SysLogDef.Alloc(0)
	if err != nil {
		return nil, err
	}
	alloc := alloc_.(*SysLog)
	// Copy fields

	return alloc, nil
}

var LogModuleDef = py.Class{
	Name:    "LogModule",
	Pointer: (*LogModule)(nil),
}

// Registers this type with a python module
func RegisterLogModule(module *py.Module) error {
	var err error
	var class *py.Type
	if class, err = LogModuleDef.Create(); err != nil {
		return err
	}

	if err = module.AddObject("LogModule", class); err != nil {
		return err
	}

	return nil
}

// Alloc allocates an object for use in python land.
// Copies the member fields from this object to the newly allocated object
// Usage: obj := GoObject{X:1, Y: 2}.Alloc()
func (obj LogModule) Alloc() (*LogModule, error) {
	// Allocate
	alloc_, err := LogModuleDef.Alloc(0)
	if err != nil {
		return nil, err
	}
	alloc := alloc_.(*LogModule)
	// Copy fields

	alloc.logger = obj.logger

	return alloc, nil
}

func (log *SysLog) Py_Module(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 1 {
		return nil, fmt.Errorf("Py_Module: parameter length mismatch")
	}

	in_0, err := gopygen.TypeConvIn(args[0], "string")
	if err != nil {
		return nil, err
	}

	res0 := log.Module(in_0.(string))

	out_0, err := gopygen.TypeConvOut(res0, "*LogModule")
	if err != nil {
		return nil, err
	}

	return out_0, nil

}

func (log *LogModule) Py_Critical(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 1 {
		return nil, fmt.Errorf("Py_Critical: parameter length mismatch")
	}

	in_0, err := gopygen.TypeConvIn(args[0], "string")
	if err != nil {
		return nil, err
	}

	log.Critical(in_0.(string))

	py.None.Incref()
	return py.None, nil

}

func (log *LogModule) Py_Debug(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 1 {
		return nil, fmt.Errorf("Py_Debug: parameter length mismatch")
	}

	in_0, err := gopygen.TypeConvIn(args[0], "string")
	if err != nil {
		return nil, err
	}

	log.Debug(in_0.(string))

	py.None.Incref()
	return py.None, nil

}

func (log *LogModule) Py_Error(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 1 {
		return nil, fmt.Errorf("Py_Error: parameter length mismatch")
	}

	in_0, err := gopygen.TypeConvIn(args[0], "string")
	if err != nil {
		return nil, err
	}

	log.Error(in_0.(string))

	py.None.Incref()
	return py.None, nil

}

func (log *LogModule) Py_Fatal(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 1 {
		return nil, fmt.Errorf("Py_Fatal: parameter length mismatch")
	}

	in_0, err := gopygen.TypeConvIn(args[0], "string")
	if err != nil {
		return nil, err
	}

	log.Fatal(in_0.(string))

	py.None.Incref()
	return py.None, nil

}

func (log *LogModule) Py_Info(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 1 {
		return nil, fmt.Errorf("Py_Info: parameter length mismatch")
	}

	in_0, err := gopygen.TypeConvIn(args[0], "string")
	if err != nil {
		return nil, err
	}

	log.Info(in_0.(string))

	py.None.Incref()
	return py.None, nil

}

func (log *LogModule) Py_Notice(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 1 {
		return nil, fmt.Errorf("Py_Notice: parameter length mismatch")
	}

	in_0, err := gopygen.TypeConvIn(args[0], "string")
	if err != nil {
		return nil, err
	}

	log.Notice(in_0.(string))

	py.None.Incref()
	return py.None, nil

}

func (log *LogModule) Py_Warning(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 1 {
		return nil, fmt.Errorf("Py_Warning: parameter length mismatch")
	}

	in_0, err := gopygen.TypeConvIn(args[0], "string")
	if err != nil {
		return nil, err
	}

	log.Warning(in_0.(string))

	py.None.Incref()
	return py.None, nil

}
