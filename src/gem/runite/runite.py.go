// Generated by gopygen; DO NOT EDIT
package runite

import (
	"fmt"

	"github.com/qur/gopy/lib"
	"github.com/tgascoigne/gopygen/gopygen"
)

// Sometimes we might generate code which doesn't use some of the above imports
// Use them here just in case
var _ = fmt.Sprintf("")
var _ = gopygen.Dummy

var ContextDef = py.Class{
	Name:    "Context",
	Pointer: (*Context)(nil),
}

// Registers this type with a python module
func RegisterContext(module *py.Module) error {
	var err error
	var class *py.Type
	if class, err = ContextDef.Create(); err != nil {
		return err
	}

	if err = module.AddObject("Context", class); err != nil {
		return err
	}

	return nil
}

// Alloc allocates an object for use in python land.
// Copies the member fields from this object to the newly allocated object
// Usage: obj := GoObject{X:1, Y: 2}.Alloc()
func (obj Context) Alloc() (*Context, error) {
	// Allocate
	alloc_, err := ContextDef.Alloc(0)
	if err != nil {
		return nil, err
	}
	alloc := alloc_.(*Context)
	// Copy fields

	alloc.FS = obj.FS

	return alloc, nil
}

func (r *Context) Py_Unpack(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 2 {
		return nil, fmt.Errorf("Py_Unpack: parameter length mismatch")
	}

	in_0, err := gopygen.TypeConvIn(args[0], "string")
	if err != nil {
		return nil, err
	}

	in_1, err := gopygen.TypeConvIn(args[1], "[]string")
	if err != nil {
		return nil, err
	}

	res0 := r.Unpack(in_0.(string), in_1.([]string))

	out_0, err := gopygen.TypeConvOut(res0, "error")
	if err != nil {
		return nil, err
	}

	return out_0, nil

}
