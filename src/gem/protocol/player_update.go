// NOT Generated by bbc (but should be in future)
package protocol

import (
	"io"

	"gem/encoding"
	"gem/game/position"
)

const (
	MobFlagRegionUpdate   int = (1 << 0)
	MobFlagWalkUpdate     int = (1 << 1)
	MobFlagRunUpdate      int = (1 << 2)
	MobFlagIdentityUpdate int = (1 << 4)
	MobFlagChatUpdate     int = (1 << 7)
	MobFlagMovementUpdate int = (MobFlagRegionUpdate | MobFlagWalkUpdate | MobFlagRunUpdate)
)

type PlayerUpdateBlock struct {
	UpdateFlags      int
	OurMovementBlock MovementUpdateBlock
}

type MovementUpdateBlock struct {
	Warp WarpMovement
	Run  RunMovement
	Walk WalkMovement

	updateFlags int
}

type WarpMovement struct {
	Location         *position.Local
	DiscardWalkQueue bool
}

type RunMovement struct {
	Direction     int
	LastDirection int
}

type WalkMovement struct {
	Direction int
}

func (struc *PlayerUpdateBlock) Encode(w io.Writer, flags interface{}) error {
	buf := encoding.NewBitBuffer(w)
	defer buf.Close()
	struc.OurMovementBlock.updateFlags = struc.UpdateFlags
	err := struc.OurMovementBlock.Encode(buf)
	if err != nil {
		return err
	}

	buf.Write(8, 0) // count of other players to update
	return nil
}

func (struc *PlayerUpdateBlock) Decode(buf io.Reader, flags interface{}) (err error) {
	panic("not implemented")
}

func (struc *MovementUpdateBlock) Encode(buf *encoding.BitBuffer) error {
	// Anything to do?
	if struc.updateFlags == 0 {
		buf.Write(1, 0) // No updates
		return nil
	}

	// Do we have any non-movement updates to perform?
	otherUpdateFlags := (struc.updateFlags & ^MobFlagMovementUpdate)

	buf.Write(1, 1) // This player has updates

	switch {
	case (struc.updateFlags & MobFlagRegionUpdate) != 0:
		buf.Write(2, 3) // update type 3 = warp to location
		localPos := struc.Warp.Location
		buf.Write(2, uint32(localPos.Z))
		buf.WriteBit(struc.Warp.DiscardWalkQueue)
		buf.WriteBit(otherUpdateFlags != 0)
		buf.Write(7, uint32(localPos.Y))
		buf.Write(7, uint32(localPos.X))

	case (struc.updateFlags & MobFlagRunUpdate) != 0:
		buf.Write(2, 2) // update type 2 = running
		buf.Write(3, uint32(struc.Run.LastDirection))
		buf.Write(3, uint32(struc.Run.Direction))
		buf.WriteBit(otherUpdateFlags != 0)

	case (struc.updateFlags & MobFlagWalkUpdate) != 0:
		buf.Write(2, 1) // update type 1 = walking
		buf.Write(3, uint32(struc.Walk.Direction))
		buf.WriteBit(otherUpdateFlags != 0)

	default:
		buf.Write(2, 0) // update type 0 = no movement updates
	}
	return nil
}

type PlayerUpdate PlayerUpdateBlock

var PlayerUpdateDefinition = encoding.PacketHeader{
	Type:   (*PlayerUpdate)(nil),
	Number: 81,
	Size:   encoding.SzVar16,
}

func (frm *PlayerUpdate) Encode(buf io.Writer, flags interface{}) (err error) {
	struc := (*PlayerUpdateBlock)(frm)
	hdr := encoding.PacketHeader{
		Number: PlayerUpdateDefinition.Number,
		Size:   PlayerUpdateDefinition.Size,
		Object: struc,
	}
	return hdr.Encode(buf, flags)
}

func (frm *PlayerUpdate) Decode(buf io.Reader, flags interface{}) (err error) {
	struc := (*PlayerUpdateBlock)(frm)
	hdr := encoding.PacketHeader{
		Number: PlayerUpdateDefinition.Number,
		Size:   PlayerUpdateDefinition.Size,
		Object: struc,
	}
	return hdr.Decode(buf, flags)
}
