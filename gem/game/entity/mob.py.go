// Generated by gopygen; DO NOT EDIT
package entity

import (
	"fmt"

	"github.com/qur/gopy/lib"
	"github.com/sinusoids/gem/gem/game/interface/entity"
	"github.com/sinusoids/gem/gem/game/position"
	"github.com/tgascoigne/gopygen/gopygen"
)

// Sometimes we might generate code which doesn't use some of the above imports
// Use them here just in case
var _ = fmt.Sprintf("")
var _ = gopygen.Dummy

var GenericMobDef = py.Class{
	Name:    "GenericMob",
	Flags:   py.TPFLAGS_BASETYPE,
	Pointer: (*GenericMob)(nil),
}

// Registers this type with a python module
func RegisterGenericMob(module *py.Module) error {
	var err error
	var class *py.Type
	if class, err = GenericMobDef.Create(); err != nil {
		return err
	}

	if err = module.AddObject("GenericMob", class); err != nil {
		return err
	}

	return nil
}

// Alloc allocates an object for use in python land.
// Copies the member fields from this object to the newly allocated object
// Usage: obj := GoObject{X:1, Y: 2}.Alloc()
func NewGenericMob() (*GenericMob, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	// Allocate
	alloc_, err := GenericMobDef.Alloc(0)
	if err != nil {
		return nil, err
	}
	alloc := alloc_.(*GenericMob)
	err = alloc.Init()
	return alloc, err
}

func (obj *GenericMob) PyInit(_args *py.Tuple, kwds *py.Dict) error {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 0 {
		return fmt.Errorf("(GenericMob) PyInit: parameter length mismatch")
	}

	err = obj.Init()

	return err
}

func (mob *GenericMob) Py_SetNextStep(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 1 {
		return nil, fmt.Errorf("Py_SetNextStep: parameter length mismatch")
	}
	// Convert parameters

	args[0].Incref()
	in_0, err := gopygen.TypeConvIn(args[0], "*position.Absolute")
	if err != nil {
		return nil, err
	}

	// Make the function call

	mob.SetNextStep(in_0.(*position.Absolute))

	// Remove local references

	args[0].Decref()

	py.None.Incref()
	return py.None, nil

}

func (mob *GenericMob) Py_Position(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 0 {
		return nil, fmt.Errorf("Py_Position: parameter length mismatch")
	}
	// Convert parameters

	// Make the function call

	res0 := mob.Position()

	// Remove local references

	out_0, err := gopygen.TypeConvOut(res0, "*position.Absolute")
	if err != nil {
		return nil, err
	}
	out_0.Incref()

	return out_0, nil

}

func (mob *GenericMob) Py_WalkDirection(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 0 {
		return nil, fmt.Errorf("Py_WalkDirection: parameter length mismatch")
	}
	// Convert parameters

	// Make the function call

	res0, res1 := mob.WalkDirection()

	// Remove local references

	out_0, err := gopygen.TypeConvOut(res0, "int")
	if err != nil {
		return nil, err
	}
	out_0.Incref()

	out_1, err := gopygen.TypeConvOut(res1, "int")
	if err != nil {
		return nil, err
	}
	out_1.Incref()

	return py.PackTuple(out_0, out_1)

}

func (mob *GenericMob) Py_Flags(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 0 {
		return nil, fmt.Errorf("Py_Flags: parameter length mismatch")
	}
	// Convert parameters

	// Make the function call

	res0 := mob.Flags()

	// Remove local references

	out_0, err := gopygen.TypeConvOut(res0, "entity.Flags")
	if err != nil {
		return nil, err
	}
	out_0.Incref()

	return out_0, nil

}

func (mob *GenericMob) Py_SetFlags(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 1 {
		return nil, fmt.Errorf("Py_SetFlags: parameter length mismatch")
	}
	// Convert parameters

	args[0].Incref()
	in_0, err := gopygen.TypeConvIn(args[0], "entity.Flags")
	if err != nil {
		return nil, err
	}

	// Make the function call

	mob.SetFlags(in_0.(entity.Flags))

	// Remove local references

	args[0].Decref()

	py.None.Incref()
	return py.None, nil

}

func (mob *GenericMob) Py_ClearFlags(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 0 {
		return nil, fmt.Errorf("Py_ClearFlags: parameter length mismatch")
	}
	// Convert parameters

	// Make the function call

	mob.ClearFlags()

	// Remove local references

	py.None.Incref()
	return py.None, nil

}

func (mob *GenericMob) Py_Region(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 0 {
		return nil, fmt.Errorf("Py_Region: parameter length mismatch")
	}
	// Convert parameters

	// Make the function call

	res0 := mob.Region()

	// Remove local references

	out_0, err := gopygen.TypeConvOut(res0, "*position.Region")
	if err != nil {
		return nil, err
	}
	out_0.Incref()

	return out_0, nil

}

func (mob *GenericMob) Py_SetPosition(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 1 {
		return nil, fmt.Errorf("Py_SetPosition: parameter length mismatch")
	}
	// Convert parameters

	args[0].Incref()
	in_0, err := gopygen.TypeConvIn(args[0], "*position.Absolute")
	if err != nil {
		return nil, err
	}

	// Make the function call

	mob.SetPosition(in_0.(*position.Absolute))

	// Remove local references

	args[0].Decref()

	py.None.Incref()
	return py.None, nil

}
