// Generated by gopygen; DO NOT EDIT
package player

import (
	"fmt"

	"github.com/qur/gopy/lib"
	"github.com/sinusoids/gem/gem/encoding"
	"github.com/sinusoids/gem/gem/game/interface/player"
	"github.com/sinusoids/gem/gem/game/position"
	"github.com/sinusoids/gem/gem/game/server"
	"github.com/tgascoigne/gopygen/gopygen"
)

// Sometimes we might generate code which doesn't use some of the above imports
// Use them here just in case
var _ = fmt.Sprintf("")
var _ = gopygen.Dummy

var PlayerDef = py.Class{
	Name:    "Player",
	Flags:   py.TPFLAGS_BASETYPE,
	Pointer: (*Player)(nil),
}

// Registers this type with a python module
func RegisterPlayer(module *py.Module) error {
	var err error
	var class *py.Type
	if class, err = PlayerDef.Create(); err != nil {
		return err
	}

	if err = module.AddObject("Player", class); err != nil {
		return err
	}

	return nil
}

// Alloc allocates an object for use in python land.
// Copies the member fields from this object to the newly allocated object
// Usage: obj := GoObject{X:1, Y: 2}.Alloc()
func NewPlayer(arg_0 *server.Connection) (*Player, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	// Allocate
	alloc_, err := PlayerDef.Alloc(0)
	if err != nil {
		return nil, err
	}
	alloc := alloc_.(*Player)
	err = alloc.Init(arg_0)
	return alloc, err
}

func (obj *Player) PyInit(_args *py.Tuple, kwds *py.Dict) error {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 1 {
		return fmt.Errorf("(Player) PyInit: parameter length mismatch")
	}

	args[0].Incref()
	in_0, err := gopygen.TypeConvIn(args[0], "*server.Connection")
	if err != nil {
		return err
	}

	err = obj.Init(in_0.(*server.Connection))

	args[0].Decref()

	return err
}

func (client *Player) Py_Conn(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 0 {
		return nil, fmt.Errorf("Py_Conn: parameter length mismatch")
	}
	// Convert parameters

	// Make the function call

	res0 := client.Conn()

	// Remove local references

	out_0, err := gopygen.TypeConvOut(res0, "*server.Connection")
	if err != nil {
		return nil, err
	}
	out_0.Incref()

	return out_0, nil

}

func (client *Player) Py_Encode(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 1 {
		return nil, fmt.Errorf("Py_Encode: parameter length mismatch")
	}
	// Convert parameters

	args[0].Incref()
	in_0, err := gopygen.TypeConvIn(args[0], "encoding.Encodable")
	if err != nil {
		return nil, err
	}

	// Make the function call

	res0 := client.Encode(in_0.(encoding.Encodable))

	// Remove local references

	args[0].Decref()

	out_0, err := gopygen.TypeConvOut(res0, "error")
	if err != nil {
		return nil, err
	}
	out_0.Incref()

	return out_0, nil

}

func (client *Player) Py_Decode(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 0 {
		return nil, fmt.Errorf("Py_Decode: parameter length mismatch")
	}
	// Convert parameters

	// Make the function call

	res0 := client.Decode()

	// Remove local references

	out_0, err := gopygen.TypeConvOut(res0, "error")
	if err != nil {
		return nil, err
	}
	out_0.Incref()

	return out_0, nil

}

func (client *Player) Py_Session(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 0 {
		return nil, fmt.Errorf("Py_Session: parameter length mismatch")
	}
	// Convert parameters

	// Make the function call

	res0 := client.Session()

	// Remove local references

	out_0, err := gopygen.TypeConvOut(res0, "player.Session")
	if err != nil {
		return nil, err
	}
	out_0.Incref()

	return out_0, nil

}

func (client *Player) Py_Profile(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 0 {
		return nil, fmt.Errorf("Py_Profile: parameter length mismatch")
	}
	// Convert parameters

	// Make the function call

	res0 := client.Profile()

	// Remove local references

	out_0, err := gopygen.TypeConvOut(res0, "player.Profile")
	if err != nil {
		return nil, err
	}
	out_0.Incref()

	return out_0, nil

}

func (client *Player) Py_SetProfile(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 1 {
		return nil, fmt.Errorf("Py_SetProfile: parameter length mismatch")
	}
	// Convert parameters

	args[0].Incref()
	in_0, err := gopygen.TypeConvIn(args[0], "player.Profile")
	if err != nil {
		return nil, err
	}

	// Make the function call

	client.SetProfile(in_0.(player.Profile))

	// Remove local references

	args[0].Decref()

	py.None.Incref()
	return py.None, nil

}

func (client *Player) Py_SetAppearance(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 1 {
		return nil, fmt.Errorf("Py_SetAppearance: parameter length mismatch")
	}
	// Convert parameters

	args[0].Incref()
	in_0, err := gopygen.TypeConvIn(args[0], "player.Appearance")
	if err != nil {
		return nil, err
	}

	// Make the function call

	client.SetAppearance(in_0.(player.Appearance))

	// Remove local references

	args[0].Decref()

	py.None.Incref()
	return py.None, nil

}

func (client *Player) Py_AppearanceUpdated(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 0 {
		return nil, fmt.Errorf("Py_AppearanceUpdated: parameter length mismatch")
	}
	// Convert parameters

	// Make the function call

	client.AppearanceUpdated()

	// Remove local references

	py.None.Incref()
	return py.None, nil

}

func (client *Player) Py_SendMessage(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 1 {
		return nil, fmt.Errorf("Py_SendMessage: parameter length mismatch")
	}
	// Convert parameters

	args[0].Incref()
	in_0, err := gopygen.TypeConvIn(args[0], "string")
	if err != nil {
		return nil, err
	}

	// Make the function call

	client.SendMessage(in_0.(string))

	// Remove local references

	args[0].Decref()

	py.None.Incref()
	return py.None, nil

}

func (client *Player) Py_SetPosition(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 1 {
		return nil, fmt.Errorf("Py_SetPosition: parameter length mismatch")
	}
	// Convert parameters

	args[0].Incref()
	in_0, err := gopygen.TypeConvIn(args[0], "*position.Absolute")
	if err != nil {
		return nil, err
	}

	// Make the function call

	client.SetPosition(in_0.(*position.Absolute))

	// Remove local references

	args[0].Decref()

	py.None.Incref()
	return py.None, nil

}

func (client *Player) Py_EntityType(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 0 {
		return nil, fmt.Errorf("Py_EntityType: parameter length mismatch")
	}
	// Convert parameters

	// Make the function call

	res0 := client.EntityType()

	// Remove local references

	out_0, err := gopygen.TypeConvOut(res0, "entity.EntityType")
	if err != nil {
		return nil, err
	}
	out_0.Incref()

	return out_0, nil

}
