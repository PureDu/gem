// Generated by gopygen; DO NOT EDIT
package runite

import (
	"fmt"
	"github.com/sinusoids/gem/gem/runite/format/rt3"

	"github.com/qur/gopy/lib"
	"github.com/tgascoigne/gopygen/gopygen"
)

// Sometimes we might generate code which doesn't use some of the above imports
// Use them here just in case
var _ = fmt.Sprintf("")
var _ = gopygen.Dummy

var ContextDef = py.Class{
	Name:    "Context",
	Flags:   py.TPFLAGS_BASETYPE,
	Pointer: (*Context)(nil),
}

// Registers this type with a python module
func RegisterContext(module *py.Module) error {
	var err error
	var class *py.Type
	if class, err = ContextDef.Create(); err != nil {
		return err
	}

	if err = module.AddObject("Context", class); err != nil {
		return err
	}

	return nil
}

func (obj *Context) PyGet_FS() (py.Object, error) {
	return gopygen.TypeConvOut(obj.FS, "*rt3.JagFS")
}

func (obj *Context) PySet_FS(arg py.Object) error {
	arg.Incref()
	val, err := gopygen.TypeConvIn(arg, "*rt3.JagFS")
	if err != nil {
		return err
	}

	if _, ok := val.(py.Object); ok {
		// If we're not converting it from a python object, we should refcount it properly
		val.(py.Object).Incref()
	}
	arg.Decref()

	var tmp interface{}
	tmp = &obj.FS
	obj.FS = val.(*rt3.JagFS)

	if oldObj, ok := tmp.(py.Object); ok {
		// If we're not converting it from a python object, we should refcount it properly
		oldObj.Decref()
	}
	return nil
}

func (r *Context) Py_Unpack(_args *py.Tuple, kwds *py.Dict) (py.Object, error) {
	lock := py.NewLock()
	defer lock.Unlock()

	var err error
	_ = err
	args := _args.Slice()
	if len(args) != 2 {
		return nil, fmt.Errorf("Py_Unpack: parameter length mismatch")
	}
	// Convert parameters

	args[0].Incref()
	in_0, err := gopygen.TypeConvIn(args[0], "string")
	if err != nil {
		return nil, err
	}

	args[1].Incref()
	in_1, err := gopygen.TypeConvIn(args[1], "[]string")
	if err != nil {
		return nil, err
	}

	// Make the function call

	res0 := r.Unpack(in_0.(string), in_1.([]string))

	// Remove local references

	args[0].Decref()

	args[1].Decref()

	out_0, err := gopygen.TypeConvOut(res0, "error")
	if err != nil {
		return nil, err
	}
	out_0.Incref()

	return out_0, nil

}
